AC_INIT([Yelp],[2.28.0],[http://bugzilla.gnome.org/enter_bug.cgi?product=yelp],[yelp])

GNOME_COMMON_INIT

AC_CONFIG_SRCDIR([src/yelp-main.c])
AC_CONFIG_HEADERS([config.h])

AM_INIT_AUTOMAKE([1.9 dist-bzip2 no-dist-gzip])
AM_MAINTAINER_MODE

AC_SUBST(ACLOCAL_AMFLAGS, "\${ACLOCAL_FLAGS}")

IT_PROG_INTLTOOL([0.35.0])
AC_PATH_PROG(GCONFTOOL, gconftool-2)

AM_GCONF_SOURCE_2

AC_PROG_LN_S
AC_PROG_CC
AM_PROG_CC_STDC
AC_ISC_POSIX
AC_HEADER_STDC
AM_PROG_LIBTOOL
AM_PATH_GLIB_2_0

AM_PROG_CC_C_O

GNOME_DEBUG_CHECK
GNOME_COMPILE_WARNINGS([maximum])

MORE_WARN_FLAGS=
DEPRECATION_FLAGS=

if test "x$enable_debug" = "xyes"; then
	AC_DEFINE([YELP_DEBUG],[1],[Enable Yelp debugging])
	AM_CFLAGS="$AM_CFLAGS -pedantic -ansi"
fi

dnl NOTE : it appears that some systems do not like it when you use line
dnl        continuation charactes to split CFLAGS into readable chunks
if test "x$GCC" = "xyes"; then
   AM_CFLAGS="$AM_CFLAGS -Wall -Wno-uninitialized -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wno-sign-compare"
fi

GETTEXT_PACKAGE=yelp
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",
                   [The gettext translation domain])

AM_GLIB_GNU_GETTEXT

AM_GLIB_DEFINE_LOCALEDIR([GNOMELOCALEDIR])

PKG_CHECK_MODULES(YELP,
[
	gio-2.0
	gconf-2.0
	gnome-doc-utils >= 0.17.2
	gtk+-unix-print-2.0
	gtk+-2.0 >= 2.10.0
	libxml-2.0 >= 2.6.5
	libxslt >= 1.1.4
	libexslt >= 0.8.1
	libstartup-notification-1.0 >= 0.8
	dbus-glib-1
	rarian >= 0.7.0
])
AC_SUBST([YELP_CFLAGS])
AC_SUBST([YELP_LIBS])

AC_PATH_PROGS(SED, gsed sed)

XSLT_PATH="`$PKG_CONFIG --variable=xsltdir gnome-doc-utils`"
DB_TITLE="$XSLT_PATH""/docbook/common/db-title.xsl"
AC_SUBST(DB_TITLE)

DB2HTML="`$PKG_CONFIG --variable=db2xhtml gnome-doc-utils`"
AC_SUBST(DB2HTML)

MAL2HTML="`$PKG_CONFIG --variable=mal2xhtml gnome-doc-utils`"
AC_SUBST(MAL2HTML)

GDU_GETTEXT="`$PKG_CONFIG --variable=gettext gnome-doc-utils`"
AC_SUBST(GDU_GETTEXT)

GDU_ICON_PATH="`$PKG_CONFIG --variable=icondir gnome-doc-utils`"
AC_SUBST(GDU_ICON_PATH)

GLIB_GENMARSHAL="`$PKG_CONFIG --variable=glib_genmarshal glib-2.0`"
AC_SUBST(GLIB_GENMARSHAL)

#
# If Pango included the shared library dependencies from X11 in
# the pkg-config output, then we use that (to avoid duplicates).
# but if they were omitted to avoid binary compatibility problems
# then we need to repeat the checks.
#
if $PKG_CONFIG --exists pangoxft ; then
  PANGO_PACKAGES="pangox pangoxft"
else
  PANGO_PACKAGES="pangox"
fi

x_libs="`$PKG_CONFIG --libs $PANGO_PACKAGES`"
case x_libs in
  *-lX11*) pango_omitted_x_deps=no ;;
  *)       pango_omitted_x_deps=yes ;;
esac

if test $pango_omitted_x_deps = yes ; then
  AC_PATH_XTRA

  if test x$no_x = xyes ; then
    AC_MSG_ERROR([X development libraries not found])
  else
    X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
  fi
fi

AC_SUBST(X_LIBS)


dnl ******
dnl beagle
dnl ******

BEAGLE_MODULES=
if $PKG_CONFIG --exists libbeagle-1.0; then
	BEAGLE_MODULES="libbeagle-1.0 >= 0.3.0"
else
	BEAGLE_MODULES="libbeagle-0.0 >= 0.2.4"
fi

AC_ARG_WITH([search],
	[AC_HELP_STRING([--with-search=basic|beagle|auto],
			[turn on search support [default=auto]])], ,
	with_search=auto)

if test "x$with_search" = "xauto"; then
    PKG_CHECK_MODULES(YELP_SEARCH, $BEAGLE_MODULES, have_beagle=yes, have_beagle=no)
fi

AM_CONDITIONAL(ENABLE_BEAGLE, test x"$with_search" = xbeagle)

if test "x$with_search" = "xbeagle"; then
    PKG_CHECK_MODULES(YELP_SEARCH, $BEAGLE_MODULES)
fi


case "x$with_search" in
  "xbasic")
    search_backend="basic"
    ;;
  "xbeagle")
    search_backend="beagle"
    AC_DEFINE(ENABLE_BEAGLE, 1, [Define if you want the power of Beagle])
    ;;
  "xauto")
    search_backend="auto - basic"
    if test x$have_beagle = xyes; then
      AC_DEFINE(ENABLE_BEAGLE, 1)
      search_backend="auto - beagle"
    fi
    ;;
  *)
    AC_MSG_ERROR([Unknown search type selected - Please use --with-search=auto|basic|beagle])
    ;;
esac

AC_SUBST([YELP_SEARCH_CFLAGS])
AC_SUBST([YELP_SEARCH_LIBS])


dnl ====================================
dnl = zlib for help converters
dnl ====================================
AC_CHECK_LIB(z, gzopen, [Z_LIBS=-lz
AC_SUBST(Z_LIBS)], AC_MSG_ERROR([*** zlib is required]))

dnl ====================================
dnl = lzmadec for help converters
dnl ====================================
LZMADEC_LIBS=
AC_CHECK_LIB(lzmadec, lzmadec_open, [LZMADEC_LIBS=-llzmadec 
				     AC_DEFINE(HAVE_LIBLZMADEC, 1, [Compile with liblzmadec support])])
AC_SUBST(LZMADEC_LIBS)

dnl ====================================
dnl = Bzip2, for the help converters
dnl ====================================
BZ_LIBS=
AC_CHECK_LIB(bz2, bzread, [AC_DEFINE(HAVE_LIBBZ2, 1, [Compile with libbz2 suppot])
			  BZ_LIBS="-lbz2"])
dnl <= Check for bzip2 > 1.0.0
    AC_CHECK_LIB(bz2, BZ2_bzread, [AC_DEFINE(HAVE_LIBBZ2, 1, [Compile with libbz2 support])
		      	  BZ_LIBS="-lbz2"
    dnl <= define the wrapper-functions to get the Bzip2 stuff working .. =>	
	   AC_DEFINE(bzread,BZ2_bzread, [Needed to get Bzip2 working])
	   AC_DEFINE(bzopen,BZ2_bzopen, [Needed to get Bzip2 working])
	   AC_DEFINE(bzdopen,BZ2_bzdopen, [Needed to get Bzip2 working])
	   AC_DEFINE(bzwrite,BZ2_bzwrite, [Needed to get Bzip2 working])
	   AC_DEFINE(bzerror,BZ2_bzerror, [Needed to get Bzip2 working])
	   AC_DEFINE(bzclose,BZ2_bzclose, [Needed to get Bzip2 working])
	   AC_DEFINE(bzflush,BZ2_bzflush, [Needed to get Bzip2 working])
	   AC_DEFINE(bzCompress,BZ2_bzCompress, [Needed to get Bzip2 working])
	   AC_DEFINE(bzCompressInit,BZ2_bzCompressInit, [Needed to get Bzip2 working])
	   AC_DEFINE(bzDecompress,BZ2_bzDecompress, [Needed to get Bzip2 working])
	   AC_DEFINE(bzDecompressInit,BZ2_bzDecompressInit, [Needed to get Bzip2 working])	
	   ])
    dnl =>
AC_SUBST(BZ_LIBS)

# *****
# Webkit
# *****
  PKG_CHECK_MODULES(YELP_WEBKIT, "webkit-1.0")
  AC_SUBST(YELP_WEBKIT_CFLAGS)
  AC_SUBST(YELP_WEBKIT_LIBS)
  AC_DEFINE(WEBKIT_BACKEND, 1, [Webkit Backend])

# *****
# SMClient
# *****

GDK_TARGET="$($PKG_CONFIG --variable target gdk-2.0)"

SMCLIENT_PKGS=
AC_MSG_CHECKING([which smclient backend to use])
AC_ARG_WITH([smclient],
  [AS_HELP_STRING([--with-smclient],[which smclient backend to use (xsmp/win32/quartz)])],
  [],
  [case "$GDK_TARGET" in
    x11) with_smclient=xsmp SMCLIENT_PKGS="sm" ;;
    win32|quartz) with_smclient=$GDK_TARGET ;;
    *) with_smclient=no ;;
   esac])
AC_MSG_RESULT([$with_smclient])

if test "$with_smclient" != "no"; then
  PKG_CHECK_MODULES([SMCLIENT],[$SMCLIENT_PKGS])
  AC_DEFINE([WITH_SMCLIENT],[1],[Define if smclient is enabled])
fi

AM_CONDITIONAL([WITH_SMCLIENT],[test "$with_smclient" != "no"])
AM_CONDITIONAL([WITH_SMCLIENT_XSMP],[test "$with_smclient" = "xsmp"])
AM_CONDITIONAL([WITH_SMCLIENT_WIN32],[test "$with_smclient" = "win32"])
AM_CONDITIONAL([WITH_SMCLIENT_QUARTZ],[test "$with_smclient" = "quartz"])

# Set flags
AM_CPPFLAGS="$AM_CPPFLAGS $DEPRECATION_FLAGS"
AM_CFLAGS="$AM_CFLAGS $WARN_CFLAGS $MORE_WARN_FLAGS"


AC_SUBST([AM_CPPFLAGS])
AC_SUBST([AM_CFLAGS])
AC_SUBST([AM_LDFLAGS])

AC_CONFIG_FILES([
Makefile
src/Makefile
stylesheets/Makefile
stylesheets/db2html.xsl
stylesheets/db-title.xsl
stylesheets/mal2html.xsl
stylesheets/toc2html.xsl
data/Makefile
data/icons/Makefile
data/ui/Makefile
po/Makefile.in
tests/Makefile
yelp.desktop.in
])

AC_OUTPUT

dnl ==========================================================================
echo "
yelp-$VERSION:

	prefix:                   ${prefix}
	source code location:	  ${srcdir}
	compiler:		  ${CC}

	Debug enabled:            ${enable_debug}
	Search backend:           ${search_backend}
	Using SMClient:           ${with_smclient}

"
