AC_INIT([Yelp],[2.14.0],[http://bugzilla.gnome.org/enter_bug.cgi?product=yelp],[yelp])

GNOME_COMMON_INIT

AC_CONFIG_SRCDIR([src/yelp-main.c])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_MACRO_DIR([m4])

AM_INIT_AUTOMAKE([1.9 dist-bzip2 no-dist-gzip])
AM_MAINTAINER_MODE

AC_SUBST(ACLOCAL_AMFLAGS, "\${ACLOCAL_FLAGS}")

AC_PROG_INTLTOOL
AC_PATH_PROG(GCONFTOOL, gconftool-2)

AM_GCONF_SOURCE_2

AC_PROG_LN_S
AC_PROG_CC
AC_PROG_CXX
AM_PROG_CC_STDC
AC_ISC_POSIX
AC_HEADER_STDC
AM_PROG_LIBTOOL
AM_PATH_ORBIT2
AM_PATH_GLIB_2_0

GNOME_DEBUG_CHECK
GNOME_COMPILE_WARNINGS([maximum])
GNOME_CXX_WARNINGS

MORE_WARN_FLAGS=
DEPRECATION_FLAGS=
if test "x$GCC" = "xyes"; then
  MOZILLA_WARN_CXXFLAGS="-Wno-ctor-dtor-privacy -Wno-non-virtual-dtor"
fi

if test "x$enable_maintainer_mode" = "xyes"; then
	AC_DEFINE([MAINTAINER_MODE],[1],[Define to enable 'maintainer-only' behaviour])
#	DEPRECATION_FLAGS="-DG_DISABLE_DEPRECATED -DGDK_DISABLE_DEPRECATED -DGDK_PIXBUF_DISABLE_DEPRECATED -DGCONF_DISABLE_DEPRECATED -DGNOME_VFS_DISABLE_DEPRECATED -DBONOBO_UI_DISABLE_DEPRECATED -DBONOBO_DISABLE_DEPRECATED -DLIBGLADE_DISABLE_DEPRECATED -DPANGO_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED -DGNOME_DISABLE_DEPRECATED"
  if test "x$GCC" = "xyes"; then
	MOZILLA_WARN_CXXFLAGS="-Wall -Wconversion -Wpointer-arith -Wcast-align -Woverloaded-virtual -Wsynth $MOZILLA_WARN_CXXFLAGS"
  fi
fi

if test "x$enable_debug" = "xyes"; then
	AC_DEFINE([YELP_DEBUG],[1],[Enable Yelp debugging])
	AM_CFLAGS="$AM_CFLAGS -pedantic -ansi"
fi

dnl NOTE : it appears that some systems do not like it when you use line
dnl        continuation charactes to split CFLAGS into readable chunks
if test "x$GCC" = "xyes"; then
   AM_CFLAGS="$AM_CFLAGS -Wall -Wno-uninitialized -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wno-sign-compare"
fi

GETTEXT_PACKAGE=yelp
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",
                   [The gettext translation domain])

ALL_LINGUAS="af am ar az be bg bn br bs ca cs cy da de el en_CA en_GB eo es et eu fa fi fr ga gl gu he hi hr hu id is it ja ka kn ko ku ky li lt lv mk ml mn mr ms nb ne nl nn nso or pa pl pt pt_BR ro ru rw sk sl sq sr sr@Latn sv ta tg th tr ug uk vi wa xh zh_CN zh_HK zh_TW zu"
AM_GLIB_GNU_GETTEXT

AM_GLIB_DEFINE_LOCALEDIR([GNOMELOCALEDIR])

PKG_CHECK_MODULES(YELP,
[
	gconf-2.0
	gnome-doc-utils >= 0.3.1
        libgnomeprint-2.2
        libgnomeprintui-2.2
	gnome-vfs-2.0 >= 1.1
	gtk+-2.0 >= 2.5.3
	libbonobo-2.0 >= 1.108.0
	libglade-2.0 >= 2.0.0
	libgnome-2.0 >= 2.0.2
	libgnomeui-2.0 >= 1.103.0
	libxml-2.0 >= 2.6.5
	libxslt >= 1.1.4
	libexslt >= 0.8.1
	libstartup-notification-1.0 >= 0.8
])
AC_SUBST([YELP_CFLAGS])
AC_SUBST([YELP_LIBS])

YELP_MODULES="gnome-vfs-2.0 libgnomeui-2.0 libbonobo-2.0"

idl_dirs="`$PKG_CONFIG --variable=idldir gnome-vfs-2.0 libgnomeui-2.0 libbonobo-2.0 bonobo-activation-2.0`"
AC_PATH_PROGS(SED, gsed sed)
YELP_IDL_INCLUDES="`echo ${idl_dirs} | ${SED} -e 's/^/ /' -e 's/  *$//' -e 's/  */ -I /g' -e 's/^  *//'`"
AC_SUBST(YELP_IDL_INCLUDES)

XSLT_PATH="`$PKG_CONFIG --variable=xsltdir gnome-doc-utils`"
DB_TITLE="$XSLT_PATH""/docbook/common/db-title.xsl"
AC_SUBST(DB_TITLE)

DB2HTML="`$PKG_CONFIG --variable=db2html gnome-doc-utils`"
AC_SUBST(DB2HTML)

#
# If Pango included the shared library dependencies from X11 in
# the pkg-config output, then we use that (to avoid duplicates).
# but if they were omitted to avoid binary compatibility problems
# then we need to repeat the checks.
#
if $PKG_CONFIG --exists pangoxft ; then
  PANGO_PACKAGES="pangox pangoxft"
else
  PANGO_PACKAGES="pangox"
fi

x_libs="`$PKG_CONFIG --libs $PANGO_PACKAGES`"
case x_libs in
  *-lX11*) pango_omitted_x_deps=no ;;
  *)       pango_omitted_x_deps=yes ;;
esac

if test $pango_omitted_x_deps = yes ; then
  AC_PATH_XTRA

  if test x$no_x = xyes ; then
    AC_MSG_ERROR([X development libraries not found])
  else
    X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
  fi
fi

AC_SUBST(X_LIBS)

AC_ARG_ENABLE([man],
	[AC_HELP_STRING([--enable-man],
			[turn on man page support [default=yes]])],,
	enable_man=yes)
AC_ARG_ENABLE([info],
	[AC_HELP_STRING([--enable-info],
			[turn on GNU info support [default=yes]])],,
	enable_info=yes)
if test "x$enable_man" = "xyes"; then
    AC_DEFINE(ENABLE_MAN, 1, [turn on man page support])
    AM_CONDITIONAL(ENABLE_MAN, true)
else
    AM_CONDITIONAL(ENABLE_MAN, false)
fi
if test "x$enable_info" = "xyes"; then
    AC_DEFINE(ENABLE_INFO, 1, [turn on GNU info support])
    AM_CONDITIONAL(ENABLE_INFO, true)
else
    AM_CONDITIONAL(ENABLE_INFO, false)
fi

if test "x$enable_man" = "xyes" -o "x$enable_info" = "xyes"; then
   AC_DEFINE(ENABLE_MAN_OR_INFO, 1, [turn of man page or GNU info support])
   AM_CONDITIONAL(ENABLE_MAN_OR_INFO, true)
else
   AM_CONDITIONAL(ENABLE_MAN_OR_INFO, false)
fi


dnl ******
dnl beagle
dnl ******

BEAGLE_MODULES="libbeagle-0.0 >= 0.2.0"

AC_ARG_WITH([search],
	[AC_HELP_STRING([--with-search=basic|beagle|auto|no],
			[turn on search support [default=auto]])], ,
	with_search=auto)

if test "x$with_search" = "xauto"; then
    PKG_CHECK_MODULES(YELP_SEARCH, $BEAGLE_MODULES, have_beagle=yes, have_beagle=no)
fi

AM_CONDITIONAL(ENABLE_SEARCH, test x"$with_search" != xno)
AM_CONDITIONAL(ENABLE_BEAGLE, test x"$with_search" = xbeagle)

if test "x$with_search" = "xbeagle"; then
    PKG_CHECK_MODULES(YELP_SEARCH, $BEAGLE_MODULES)
else
    YELP_SEARCH_CFLAGS=""
    YELP_SEARCH_LIBS=""
fi


case "x$with_search" in
  "xbasic")
    search_backend="basic"
    AC_DEFINE(ENABLE_SEARCH, 1, [Define if you want any search])
    ;;
  "xbeagle")
    search_backend="beagle"
    AC_DEFINE(ENABLE_SEARCH, 1, [Define if you want any search])
    AC_DEFINE(ENABLE_BEAGLE, 1, [Define if you want the power of Beagle])
    ;;
  "xno")
    search_backend="none"
    ;;
  "xauto")
    AC_DEFINE(ENABLE_SEARCH, 1)
    search_backend="auto - basic"
    if test x$have_beagle = xyes; then
      AC_DEFINE(ENABLE_BEAGLE, 1)
      search_backend="auto - beagle"
    fi
    ;;
  *)
    AC_MSG_ERROR([Unknown search type selected - Please use --with-search=auto|basic|beagle|no])
    ;;
esac

AC_SUBST([YELP_SEARCH_CFLAGS])
AC_SUBST([YELP_SEARCH_LIBS])

# *****
# Gecko
# *****

GECKO_INIT([MOZILLA])

AC_SUBST([MOZILLA])
AC_SUBST([MOZILLA_INCLUDE_ROOT])
AC_SUBST([MOZILLA_HOME])

case "$MOZILLA" in
mozilla) gecko_min_version=1.7 ;;
seamonkey) gecko_min_version=1.0 ;;
*firefox) gecko_min_version=1.0 ;;
*thunderbird) gecko_min_version=1.0 ;;
xulrunner) gecko_min_version=1.8 ;;
esac

PKG_CHECK_MODULES([MOZILLA_COMPONENT],[$MOZILLA-gtkmozembed >= $gecko_min_version $MOZILLA-xpcom >= $gecko_min_version])

dnl Needed since gecko 1.8b2
AC_DEFINE([MOZILLA_INTERNAL_API],[1],[Define to have access to internal Mozilla APIs])

AC_CHECK_FILE([$MOZILLA_INCLUDE_ROOT/fastfind/nsITypeAheadFind.h],
	[AC_DEFINE([TYPEAHEADFIND],[1],[Define if we have toolkit's nsITypeAheadFind])])

dnl ====================================
dnl = zlib for help converters
dnl ====================================
AC_CHECK_LIB(z, gzopen, [Z_LIBS=-lz
AC_SUBST(Z_LIBS)], AC_MSG_ERROR([*** zlib is required]))

dnl ====================================
dnl = Bzip2, for the help converters
dnl ====================================
BZ_LIBS=
AC_CHECK_LIB(bz2, bzread, [AC_DEFINE(HAVE_LIBBZ2, 1, [Compile with libbz2 suppot])
			  BZ_LIBS="-lbz2"])
dnl <= Check for bzip2 > 1.0.0
    AC_CHECK_LIB(bz2, BZ2_bzread, [AC_DEFINE(HAVE_LIBBZ2, 1, [Compile with libbz2 support])
		      	  BZ_LIBS="-lbz2"
    dnl <= define the wrapper-functions to get the Bzip2 stuff working .. =>	
	   AC_DEFINE(bzread,BZ2_bzread, [Needed to get Bzip2 working])
	   AC_DEFINE(bzopen,BZ2_bzopen, [Needed to get Bzip2 working])
	   AC_DEFINE(bzdopen,BZ2_bzdopen, [Needed to get Bzip2 working])
	   AC_DEFINE(bzwrite,BZ2_bzwrite, [Needed to get Bzip2 working])
	   AC_DEFINE(bzerror,BZ2_bzerror, [Needed to get Bzip2 working])
	   AC_DEFINE(bzclose,BZ2_bzclose, [Needed to get Bzip2 working])
	   AC_DEFINE(bzflush,BZ2_bzflush, [Needed to get Bzip2 working])
	   AC_DEFINE(bzCompress,BZ2_bzCompress, [Needed to get Bzip2 working])
	   AC_DEFINE(bzCompressInit,BZ2_bzCompressInit, [Needed to get Bzip2 working])
	   AC_DEFINE(bzDecompress,BZ2_bzDecompress, [Needed to get Bzip2 working])
	   AC_DEFINE(bzDecompressInit,BZ2_bzDecompressInit, [Needed to get Bzip2 working])	
	   ])
    dnl =>
AC_SUBST(BZ_LIBS)

# Set flags

AM_CPPFLAGS="$AM_CPPFLAGS $DEPRECATION_FLAGS"
AM_CFLAGS="$AM_CFLAGS $WARN_CFLAGS $MORE_WARN_FLAGS"
AM_CXXFLAGS="$AM_CXXFLAGS $WARN_CXXFLAGS $MOZILLA_WARN_CXXFLAGS"
AC_SUBST([AM_CPPFLAGS])
AC_SUBST([AM_CFLAGS])
AC_SUBST([AM_CXXFLAGS])
AC_SUBST([AM_LDFLAGS])

AC_CONFIG_FILES([
Makefile
src/Makefile
stylesheets/Makefile
stylesheets/db2html.xsl
stylesheets/db-title.xsl
data/Makefile
data/icons/Makefile
data/ui/Makefile
po/Makefile.in
yelp.desktop.in
])

AC_OUTPUT

dnl ==========================================================================
echo "
yelp-$VERSION:

	prefix:                   ${prefix}
	source code location:	  ${srcdir}
	compiler:		  ${CC}

	Debug enabled:            ${enable_debug}
	Man Pages enabled:        ${enable_man}
	Info Pages enabled:       ${enable_info}
	Beagle available:         ${have_beagle}
	Search backend:           ${search_backend}
	Mozilla version:          ${MOZILLA}
"
